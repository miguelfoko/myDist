(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{"1DUX":function(e,n){e.exports="ngb-carousel .picsum-img-wrapper {\n  position: relative;\n  display: block;\n  height: 100px;\n  padding-top: 55%;\n  /* Keep ratio for 900x500 images */ }\n\nngb-carousel .picsum-img-wrapper > img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0; }\n\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n\n.barTitle {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 30px;\n  margin-bottom: 70px;\n  background: #f6aa30; }\n\n.marge {\n  margin-left: 30px;\n  margin-right: 30px; }\n\n.lineDs {\n  display: flex;\n  flex-direction: column;\n  padding-top: 20px;\n  justify-content: center;\n  margin-left: -12px;\n  margin-right: -12px; }\n\n.teamGestion {\n  margin-bottom: 30px;\n  background: url('back2.b74643cbbe7d68c54554.jpeg');\n  background-repeat: round;\n  padding-top: 20px;\n  background-position-y: -522px;\n  background-position-x: -140px;\n  display: block;\n  padding-bottom: 20px;\n  margin-right: 0px;\n  background-repeat: no-repeat;\n  margin-left: 0px; }\n\n.cardTeamGestion {\n  padding: 40px 30px 30px;\n  background-color: #fff;\n  min-height: 0px;\n  border-radius: 4px;\n  margin-bottom: 30px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16); }\n\n.cardTeamGestion p {\n  text-align: center;\n  font-size: 11px;\n  color: #7b7b7b;\n  text-transform: uppercase;\n  letter-spacing: 0px;\n  font-weight: 600;\n  margin-bottom: 15px; }\n\n.cardTeamGestion h5 {\n  text-align: center;\n  font-weight: 700;\n  font-size: 16px;\n  letter-spacing: -0.5px;\n  text-transform: uppercase; }\n\n.teamGroup {\n  margin-bottom: 10px; }\n\n.teamImage {\n  height: 80px;\n  width: 80px;\n  border-radius: 100vh; }\n\nnb-card-body {\n  margin: 0 -0.5rem; }\n\nnb-card-body button,\n  nb-card-body p {\n    margin: 0.5rem 0.5rem 0; }\n\n.popover-card {\n  margin: 0;\n  max-width: 20rem; }\n\nngb-carousel .fill {\n  display: block; }\n\nngb-carousel .fill {\n  display: block;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden; }\n\nngb-carousel .fill > img {\n  flex-shrink: 0;\n  min-width: 100%;\n  min-height: 100%; }\n\n.picture {\n  background-position: center;\n  background-size: cover;\n  position: relative;\n  border-top-left-radius: nb-theme(card-border-radius);\n  border-top-right-radius: nb-theme(card-border-radius);\n  flex: 1; }\n\n/* Handle on hover */\n\n::-webkit-scrollbar-thumb:hover {\n  background: #f6aa30; }\n\n/* width */\n\n::-webkit-scrollbar {\n  width: 40px; }\n\n/* Track */\n\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 5px white;\n  border-radius: 10px; }\n\n/* Handle */\n\n::-webkit-scrollbar-thumb {\n  background: red;\n  border-radius: 10px; }\n"},"1zF3":function(e,n){e.exports='<nb-layout>\n  <nb-layout-column style="display: contents;">\n    <div style="overflow: auto; background-color: #edf1f7;">\n      \x3c!-- Navigation --\x3e\n      <div id="NavBig"\n        style="position: fixed;top: 0;right: 0;left: 0;z-index: 1030;box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);">\n        <div class="example" style="background-color:rgb( 252 ,  204, 0);height: 20px;">\n          <p style=" margin-bottom:0px;">{{messageup}} </p>\n        </div>\n        <nav class="navbar navbar-expand-lg navbar-light bg-light"\n          style="background-color: white !important;box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);">\n          <div style="display: flex;flex: 1;flex-direction: column;">\n            <div style="display: flex;flex-direction: row;justify-content: space-between;">\n              <div style="display: flex;flex-direction: row;" class="col-sm-">\n                \x3c!-- <div style="display: flex;flex-direction: row;">\n                  <div style="display: flex;flex-direction: row;color: grey;margin-right: 10px;">\n                    <p style="opacity: 40%; margin:0px;display: flex;align-items: center;font-size: 11px;">\n                      <mat-icon style="font-size: 20px;">phone</mat-icon> +237 XX XX XX XX\n                    </p>\n                  </div>\n                </div> --\x3e\n                <div style="display: flex;flex-direction: row; margin:0px; margin-left: 30px;">\n                  <div style="display: flex;flex-direction: row; color: grey;">\n                    <p style="opacity: 40%; margin:0px;display: flex;align-items: center;font-size: 11px;">\n                      <mat-icon style="font-size: 20px;">mail</mat-icon> microcap@gmail.com\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <div style="display: flex;flex-direction: row;">\n                <div\n                  style="display: flex;flex-direction: row;align-items: center;padding-right: 20px;border-right-style: solid;border-right-width: 1px;border-right-color: #afadad;">\n                  <div style="margin-right: 20px;font-size: 11px;">\n                    Choose langue\n                  </div>\n                  <select id="cars">\n                    <option value="FR">FR</option>\n                    <option value="EN">EN</option>\n                    <option value="CM">CM</option>\n                    <option value="DE">DE</option>\n                  </select>\n                </div>\n                <div style="display: flex;margin-left: 20px; flex-direction: row;">\n                  <div *ngIf="searched">\n                    <input type="text">\n                  </div>\n                  <nb-action icon="search" (click)="search()"></nb-action>\n                </div>\n              </div>\n            </div>\n            <div class="row" style="margin-bottom: 10px;margin-top: 10px;">\n              <div class="col-md-6">\n                <a style="margin-left: 30px;"[routerLink]="[\'/pfm\']">\n                  <img class="logo" height="50" src="../../assets/images/Logo - Microcap transparent.jpg" width="100">\n                </a>\n              </div>\n              <div class="col-md-6" style="flex-direction: column;display: flex;align-items: flex-end;">\n                <div style="flex:1;display: flex;align-items: center;">\n                  <ul class="nav justify-content-center">\n                    <li class="nav-item">\n                      <a\n\t[routerLink]="[\'../auth/login\']" class="menu-item">Connexion</a>\n                    </li>\n                    <li class="nav-item">\n                      <a\n                      [routerLink]="[\'../auth/register\']" class="menu-item">Inscription</a>\n                    </li>\n                    <li class="nav-item">\n                      <a class="nav-links" href="#">Reseau d\'agent</a>\n                    </li>\n                    <li class="nav-item">\n                      <a class="nav-links" href="#">V\xe9rifier le site</a>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </nav>\n        <nav class="navbar navbar-expand-lg navbar-light bg-light"\n          style="background-color: rgb( 252 ,  204, 0)!important;">\n          <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo01"\n            aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="Toggle navigation">\n            <span class="navbar-toggler-icon"></span>\n          </button>\n          <div class="collapse navbar-collapse" id="navbarTogglerDemo01" style="justify-content: center;">\n            <ul class="navbar-nav mt-2 mt-lg-0" style="display: flex;justify-content: center;">\n              <li class="nav-item" style="margin-left: 55px;">\n                <a class="nav-link" href="#mainNav">Accueil<span class="sr-only">(current)</span></a>\n              </li>\n              <li class="nav-item" style="margin-left: 55px;">\n                <a class="nav-link" href="#microcap">Microcap</a>\n              </li>\n              <li class="nav-item" style="margin-left: 55px;">\n                <a class="nav-link" href="#projet">Projet</a>\n              </li>\n              \x3c!-- <li class="nav-item" style="margin-left: 45px;">\n                <a class="nav-link" href="#entreprise">Entreprise</a>\n              </li> --\x3e\n              \x3c!-- <li class="nav-item" style="margin-left: 45px;">\n                <a class="nav-link" href="#">Live</a>\n              </li> --\x3e\n              <li class="nav-item" style="margin-left: 55px;">\n                <a class="nav-link" href="#">Pays</a>\n              </li>\n              \x3c!-- <li class="nav-item" style="margin-left: 45px;">\n                <a class="nav-link"  [routerLink]="[\'/project\']">Temporaire</a>\n              </li> --\x3e\n            </ul>\n            \x3c!-- <div class="form-inline my-2 my-lg-0">\n              <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">\n              <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>\n            </div> --\x3e\n          </div>\n        </nav>\n      </div>\n      <div id="NavSmall"\n        style="position: fixed;top: 0;right: 0;left: 0;z-index: 1030;box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);">\n        <div class="example" style="background-color:rgb( 252 ,  204, 0);height: auto;;">\n          <p style=" margin-bottom:0px;white-space: nowrap;">{{messageup}} </p>\n        </div>\n        <div\n          style="padding: 20px; display: flex;flex-direction: row; justify-content: space-between; background-color: white;">\n          <div class="row">\n            <a style="margin-left: 20px;" [routerLink]="[\'/pfm\']">\n              <img height="50" src="../../assets/images/Logo - Microcap transparent.jpg" width="100">\n            </a>\n          </div>\n          <div style="display: flex;align-items: center;font-weight: 800; font-size: 19px;">\n            <div style="display: flex;margin-left: 20px;" (click)="toggle()">\n              <nb-action icon="menu-outline"></nb-action>\n            </div>\n            <ul class="nav justify-content-center">\n              <li class="nav-item">\n                <a class="nav-links" [routerLink]="[\'../auth/login\']" style="color: #fccd33;    font-size: 16px;" href="#">Connexion</a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-links" [routerLink]="[\'../auth/register\']"  style="color: black;    font-size: 16px;" href="#">Insciption</a>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div class="mobileMenu" *ngIf="show">\n          <div class="col-9" style="justify-content: flex-start;display: flex;flex-direction: column">\n            \x3c!-- <div style="display: flex;flex-direction: row;color: white;margin-right: 10px;">\n              <p style=" color: white; margin:0px;display: flex;align-items: center;font-size: 11px;">\n                <mat-icon style="font-size: 20px;">phone</mat-icon> +237 XX XX XX XX\n              </p>\n            </div> --\x3e\n            <div style="display: flex;flex-direction: row; color: white;">\n              <p style=" color: white; margin:0px;display: flex;align-items: center;font-size: 11px;">\n                <mat-icon style="font-size: 20px;">mail</mat-icon> microcap@gmail.com\n              </p>\n            </div>\n            <div style="display: flex;flex-direction: row;     margin-top: 30px;">\n              <div\n                style="display: flex;flex-direction: row;align-items: center;padding-right: 20px;border-right-style: solid;border-right-width: 1px;">\n                <div style="margin-right: 20px;font-size: 11px; color: white;">\n                  Choose langue\n                </div>\n                <select id="cars">\n                  <option value="FR">FR</option>\n                  <option value="EN">EN</option>\n                  <option value="CM">CM</option>\n                  <option value="DE">DE</option>\n                </select>\n              </div>\n            </div>\n            <div class="form-group row" style="    margin-top: 20px;">\n              <div class="col-sm-9">\n                <input type="text" #search nbInput fullWidth id="inputSearch" placeholder="Recherche">\n              </div>\n              \x3c!-- <nb-action icon="search" (click)="search()"></nb-action> --\x3e\n            </div>\n            \x3c!-- <div class="row" style="margin-left: 0px;margin-top: 20px;">\n              <div class="col-md-12">\n                <ul class="nav justify-content-center">\n                  <li class="nav-item">\n                    <a class="nav-linkx"  href="#">Connexion</a>\n                  </li>\n                  <li class="nav-item">\n                    <a class="nav-linkx" href="#">Inscription</a>\n                  </li>\n                  <li class="nav-item">\n                    <a class="nav-linkx" href="#">Reseau d\'agent</a>\n                  </li>\n                  <li class="nav-item">\n                    <a class="nav-linkx" href="#">V\xe9rifier le site</a>\n                  </li>\n                </ul>\n              </div>\n            </div> --\x3e\n          </div>\n          <div class="col-3" style="border-left-style: solid;color: #fccd33;height: fit-content;">\n            <ul class="navbar-nav mt-2 mt-lg-0" style="display: flex;justify-content: center;">\n              <li class="nav-item">\n                <a class="nav-link" (click)="hide()" href="#mainNav">Accueil<span class="sr-only">(current)</span></a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" (click)="hide()" href="#microcap">Microcap</a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" (click)="hide()" href="#projet">Projet</a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" (click)="hide()" href="#entreprise">Entreprise</a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" (click)="hide()" href="#">Pays</a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" (click)="hide()" href="#">R\xe9seau d\'agent</a>\n              </li>\n              <li class="nav-item">\n                <a class="nav-link" (click)="hide()" href="#">v\xe9rifier site</a>\n              </li>\n              \x3c!-- <li class="nav-item">\n                <a class="nav-link" (click)="hide()"  [routerLink]="[\'/project\']">Temporaire</a>\n              </li> --\x3e\n            </ul>\n          </div>\n        </div>\n      </div>\n      <header id="mainNav">\n\n        <ngb-carousel style="display:flex;margin-bottom: 20px;height: 650px;background: #615c5c;">\n          \x3c!-- <ng-template ngbSlide>\n            <div style="justify-content: center;display: flex;flex: 1;margin-left: 0px;margin-right: 0px;width: 100%;">\n              <div class="fill" style="flex:1; display:flex">\n                <img src="../assets/img1.jpg" alt="Random slide">\n                <div class="carousel-caption" style="margin-left: 70px;margin-bottom: 70px;left: 0%;text-align: initial;">\n                  <h3>No mouse navigation</h3>\n                  <p>This carousel hides navigation arrows and indicators.</p>\n                </div>\n              </div>\n            </div>\n          </ng-template> --\x3e\n          <ng-template ngbSlide>\n            <div style="justify-content: center;display: flex;flex: 1;margin-left: 0px;margin-right: 0px;width: 100%;">\n              <div class="fill" style="flex:1; display:flex">\n                <img src=\'./../assets/patrice/Image d\u2019iOS (6).jpg\' height="700px" alt="Duo Line" class="scaled">\n                \x3c!-- <div class="carousel-caption"\n                  style="margin-left: 70px;margin-bottom: 70px;left: 0%;text-align: initial;">\n                  <h3>Duo <span style="color: rgb( 252 ,  204, 0);">Line</span></h3>\n                  <p>Le programme Duo Line porte les projets qui concourent a l\'acc\xe8s au logement et \xe0\n                    la\n                    propri\xe9te pour tout budget.</p>\n                </div> --\x3e\n              </div>\n            </div>\n          </ng-template>\n          \x3c!-- <ng-template ngbSlide>\n            <div style="justify-content: center;display: flex;flex: 1;margin-left: 0px;margin-right: 0px;width: 100%;">\n              <div class="fill" style="flex:1; display:flex">\n                <img src=\'./../assets/patrice/Image d\u2019iOS (7).jpg\' height="700px" alt="Bankalim" class="scaled">\n                <div class="carousel-caption"\n                  style="margin-left: 70px;margin-bottom: 70px;left: 0%;text-align: initial;">\n                  <h3><span style="color: rgb( 252 ,  204, 0);">Bankalim</span></h3>\n                  <p>Ce programme accompagne les projets de soutien \xe0 la production alimentaire rurale\n                    et\n                    villageoise.</p>\n                </div>\n              </div>\n            </div>\n          </ng-template> --\x3e\n          \x3c!-- <ng-template ngbSlide>\n            <div style="justify-content: center;display: flex;flex: 1;margin-left: 0px;margin-right: 0px;width: 100%;">\n              <div class="fill" style="flex:1; display:flex">\n                <img src=\'./../assets/patrice/Image d\u2019iOS (8).jpg\' height="700px" alt="Centrale A+" class="scaled">\n                <div class="carousel-caption"\n                  style="margin-left: 70px;margin-bottom: 70px;left: 0%;text-align: initial;">\n                  <h3><span style="color: rgb( 252 ,  204, 0);">Centrale A+</span></h3>\n                  <p>Programme dedi\xe9 aux projets de distribution solidaire pour les produits des petits\n                    producteurs et commercants.</p>\n                </div>\n              </div>\n            </div>\n          </ng-template> --\x3e\n          <ng-template ngbSlide>\n            <div style="justify-content: center;display: flex;flex: 1;margin-left: 0px;margin-right: 0px;width: 100%;">\n              <div class="fill" style="flex:1; display:flex">\n                <img src=\'./../assets/patrice/Image d\u2019iOS (9).jpg\' height="700px" alt="Centrale A+" class="scaled">\n                \x3c!-- <div class="carousel-caption"\n                  style="margin-left: 70px;margin-bottom: 70px;left: 0%;text-align: initial;">\n                  <h3><span style="color: rgb( 252 ,  204, 0);">Centrale A+</span></h3>\n                  <p>Programme dedi\xe9 aux projets de distribution solidaire pour les produits des petits\n                    producteurs et commercants.</p>\n                </div> --\x3e\n              </div>\n            </div>\n          </ng-template>\n        </ngb-carousel>\n      </header>\n      <div style="padding:0px">\n        <div style="margin-left: 15px;margin-right: 15px;">\n          <div class="row">\n            <div class="col-md-9">\n              <section id="microcap" style="padding-bottom: 30px;margin-bottom: 0px;">\n                <div class="titles">\n                  <h4 style="font-size: 20px;">\n                    A PROPOS DE MICROCAP\n                  </h4>\n                </div>\n                <div>\n                  <div class="lineDs">\n                    <div style="display: flex;flex-direction: column; flex: 1;">\n                      <div class="row marge" style="margin-bottom: 30px;">\n                        <div class="col-sm-4 col-md-4">\n                          <img class="imgMicro" src="./../../../assets/Illustration/Illustration 3 - MicroCap-01.png"\n                            alt="" height=\'100px\'>\n                        </div>\n                        <div class="col-sm-8 col-md-8">\n\n                          <article style="margin-bottom: 50px;">\n                            <div\n                              style="margin-bottom: 12px;display: flex;flex: 1;flex-direction: row;align-items: center;">\n                              <h4 style="margin: 10px;">LE SERVICE MICROCAP</h4>\n                              <div class="verticalLine"></div>\n                            </div>\n                            <p>Microcap@ est un service d\'accompagnement d\'entrepreneurs par des entrepreneurs pour le\n                              compte d\'investisseurs professionnel et institutionnels. Les services s\'appuie sur une\n                              d\xe9marche progressive et ludique pour d\'abord inciter \xe0 entreprendre puis pr\xe9parer \xe0\n                              rencontrer\n                              des investisseurs.</p>\n                          </article>\n                          <article style="margin-bottom: 50px;">\n                            <div\n                              style="margin-bottom: 12px;display: flex;flex: 1;flex-direction: row;align-items: center;">\n                              <h4 style="margin: 10px;">LA SOCIETE MICROCAP</h4>\n                              <div class="verticalLine"></div>\n                            </div>\n                            <p>Le service est propos\xe9 par MicroCap Invest, un fonds solidaire d\'entrepreneurs qui\n                              mutualisent les risques et les ressources pour favoriser l\'intervention des investisseurs\n                              partenaires</p>\n                          </article>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class="lineDs">\n                    <div style="display: flex;flex-direction: column; flex: 1;">\n                      <div\n                        style="margin-bottom: 12px; display: flex;flex: 1;flex-direction: row;justify-content: center;align-items: center;">\n                        <div class="verticalLine"></div>\n                        <h4 style="margin: 10px;">LA PLATEFORME MICROCAP</h4>\n                        <div class="verticalLine"></div>\n                      </div>\n                      <div class="container" style="margin-bottom: 50px;">\n                        <p>La plateforme MicroCap donne l\'opportunit\xe9 \xe0 toute personne qui le souhaite, de vivre\n                          l\'aventure\n                          entrepreunariale avec beaucoup plus de cerenit\xe9 que dans le parcours classique. C\'est une\n                          sorte\n                          d\'incubation compatible avec la situation de chacun qui souhaite entreprendre ur une \xe9ch\xe9ance\n                          de 6\n                          mois \xe0 3 ans. Devenir membre, c\'est se donner le droit d\'entreprendre \xe0 tout</p>\n                      </div>\n                      <div class="container">\n                        <div class="row">\n                          <div class="col-12">\n                            <p style="color: rgb( 252 , 204, 0);font-size: 25px;font-weight: bold;text-align: center;">Une exp\xe9rience\n                              unique\n                              et un\n                              rythme\n                              personnalis\xe9e pour chacun en cinq \xe9tapes: </p>\n                          </div>\n                        </div>\n                        <div class="row">\n                          <div class="col-md-12">\n                            <div>\n                              <p style="height:60px;line-height:20px; overflow:hidden;">\n                                Votre id\xe9e n\'est pas encore formalis\xe9e. Votre projet n\'est pas assez mature. Vous n\'avez\n                                r\xe9ellement pas encore de clients ou tout simplement vous n\'etes pas assez pr\xe9sentable...\n                                tous ces pr\xe9textes pour lesquels on vous a toujours dit "NON" sont les meilleurs atous\n                                pour lesquels nous vous disons "OUI"</p>\n                            </div>\n                          </div>\n                        </div>\n                        <div class="row " style="margin-bottom: 30px;">\n                          <div class="col-md-1 col-sm-1 col-lg-1" style="display: flex;flex-direction: column;flex: 1;">\n                          </div>\n                          <div *ngFor="let data of imagedata" (click)="openDetai(data)"\n                            class="col-md-4 col-sm-4 col-lg-2" style="display: flex;flex-direction: column;flex: 1;">\n                            <img class="imgMicro" src={{data.image}} alt="" height=\'100px\'>\n                            <div style="display: flex;justify-content: center;">\n                              <p style="font-size: 17px;text-align: center;font-weight: normal;"> {{data.id}} - \n                                <span style="color: rgb(0, 0, 0);">{{data.titre1}}</span> \n                                <span style="color: rgb( 252 , 204, 0);"> CLUB</span> </p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </section>\n              <section\n                style="padding: 0px;background: url(\'./../../assets/back2.jpeg\'); border-bottom-left-radius: 10px;border-bottom-right-radius: 10px;">\n                <div\n                  style="display: flex;flex: 1;background-color: #000000cc;border-bottom-left-radius: 10px;border-bottom-right-radius: 10px;">\n                  <div style="display: flex;flex: 1;">\n                    <div class="container">\n                      <div\n                        style="margin-top: 70px; margin-bottom: 20px;display: flex;flex: 1;flex-direction: row;align-items: center;justify-content: center;">\n                        <div class="verticalLine"></div>\n                        <h4 style="margin: 10px;color: white;">L\'EQUIPE DE GESTION</h4>\n                        <div class="verticalLine"></div>\n                      </div>\n                      <div class="row marge teamGestion">\n                        <mdb-carousel class="carousel slide carousel-fade" [animation]="\'fade\'">\n                          <mdb-carousel-item>\n                            <div class="d-block w-100">\n                              <div class="row" style="margin-bottom: 20px;margin-top: 20px;">\n                                <div class="col-md-4 col-sm-4 offset-md-2 offset-sm-2"\n                                  style="display: flex;flex-direction: column;flex: 1;">\n                                  <div class="cardTeamGestion">\n                                    <div class="row">\n                                      <div class="col-sm-12 col-md-12 col-lg-4"\n                                        style="display: flex;justify-content: center;">\n                                        <img src="./../../../assets/images/nick.png" alt="" class="teamImages">\n                                      </div>\n                                      <div class="col-sm-12 col-md-12 col-lg-8" style="display: flex;">\n                                        <div class="teamGroup">\n                                          <article>\n                                            <h5>Alex Balwin</h5>\n                                            <p>Pr\xe9sident du Directoire</p>\n                                            <div class="verticalLineWhite"></div>\n                                            <p>\n                                              <span\n                                                style="color:white; font-family:Arial, Helvetica, sans-serif; text-transform: none;">\n                                                Ex DG de Moneytel</span><br>\n                                            </p>\n                                          </article>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                                <div class="col-md-4 col-sm-4" style="display: flex;flex-direction: column;flex: 1;">\n                                  <div class="cardTeamGestion">\n                                    <div class="row">\n                                      <div class="col-sm-12 col-md-12 col-lg-4"\n                                        style="display: flex;justify-content: center;">\n                                        <img src="./../../../assets/images/nick.png" alt="" class="teamImages">\n                                      </div>\n                                      <div class="col-sm-12 col-md-12 col-lg-8" style="display: flex;">\n                                        <div class="teamGroup">\n                                          <article>\n                                            <h5>Thierry Cabral</h5>\n                                            <p>Directeur du r\xe9seau</p>\n                                            <div class="verticalLineWhite"></div>\n                                            <p>\n                                              <span\n                                                style="color:white; font-family:Arial, Helvetica, sans-serif; text-transform: none;">\n                                                7 ans comme community manager chez Morgan & Fr\xe8res</span><br>\n                                            </p>\n                                          </article>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </mdb-carousel-item>\n                          <mdb-carousel-item>\n                            <div class="d-block w-100">\n                              <div class="row" style="margin-bottom: 20px;margin-top: 20px;">\n                                <div class="col-md-4 col-sm-4 offset-md-2 offset-sm-2"\n                                  style="display: flex;flex-direction: column;flex: 1;">\n                                  <div class="cardTeamGestion">\n                                    <div class="row">\n                                      <div class="col-sm-12 col-md-12 col-lg-4"\n                                        style="display: flex;justify-content: center;">\n                                        <img src="./../../../assets/images/nick.png" alt="" class="teamImages">\n                                      </div>\n                                      <div class="col-sm-12 col-md-12 col-lg-8" style="display: flex;">\n                                        <div class="teamGroup">\n                                          <article>\n                                            <h5>Ngongo Felix</h5>\n                                            <p>Team mananger</p>\n                                            <div class="verticalLineWhite"></div>\n\n                                          </article>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                                <div class="ccol-md-4 col-sm-4" style="display: flex;flex-direction: column;flex: 1;">\n                                  <div class="cardTeamGestion">\n                                    <div class="row">\n                                      <div class="col-sm-12 col-md-12 col-lg-4"\n                                        style="display: flex;justify-content: center;">\n                                        <img src="./../../../assets/images/eva.png" alt="" class="teamImages">\n                                      </div>\n                                      <div class="col-sm-12 col-md-12 col-lg-8" style="display: flex;">\n                                        <div class="teamGroup">\n                                          <article>\n                                            <h5>Bruce Wayne</h5>\n                                            <p>Directeur Wayne Enterprise</p>\n                                            <div class="verticalLineWhite"></div>\n                                            <p><span\n                                                style="color: white; font-family:Arial, Helvetica, sans-serif; text-transform: none;">\n                                                Alias????.........</span><br></p>\n                                          </article>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </mdb-carousel-item>\n                          \x3c!-- <mdb-carousel-item>\n                          <div class="d-block w-100">\n                            <div class="row">\n                              <div class="col-md-3 offset-md-2" style="display: flex;flex-direction: column;flex: 1;">\n                                <nb-card>\n                                  <img src="./../../../assets/images/kitten-default.png" alt="" style="height: 225px;">\n                                  <div style="flex: 1;margin: 20px;">\n                                    <article style="height: 100px;">\n                                      <h5 style="text-align: center;">Thierry Cabral</h5>\n                                      <p style="text-align: center;">Directeur du reseau</p>\n                                      <p style="text-align: center;">7 ans comme community manager chez morgan et rex</p>\n                                    </article>\n                                  </div>\n                                </nb-card>\n                              </div>\n                              <div class="col-md-3 offset-md-2" style="display: flex;flex-direction: column;flex: 1;">\n                                <nb-card>\n                                  <img src="./../../../assets/images/kitten-default.png" alt="" style="height: 225px;">\n                                  <div style="flex: 1;margin: 20px;">\n                                    <article style="height: 100px;">\n                                      <h5 style="text-align: center;">Alex Bawin</h5>\n                                      <p style="text-align: center;">Ex directeur de Moneytel</p>\n                                    </article>\n                                  </div>\n                                </nb-card>\n                              </div>\n                            </div>\n                          </div>\n                        </mdb-carousel-item> --\x3e\n                        </mdb-carousel>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </section>\n              <section id="projet">\n                <div\n                  style="margin-bottom: 70px; display: flex;flex: 1;flex-direction: row;justify-content: center;align-items: center;">\n                  <div class="verticalLine"></div>\n                  <h4 style="margin: 10px;">LES PROJETS DE LA PLATEFORME</h4>\n                  <div class="verticalLine"></div>\n                </div>\n                <div>\n                  <div style="display: flexbox;flex-direction: column; ">\n                    <div class="container">\n                      <div style="display: flex;flex: 1;">\n                        <div style="display: flex; align-items: center;">\n                          <button class="buttonScrollHorizontal" (click)="scrollLeft()">\n                            <mat-icon class="iconClass">chevron_left</mat-icon>\n                          </button>\n                        </div>\n\n                        <div #widgetsContent class="middle" style="display: flex;flex: 1;overflow: hidden;">\n                          <a *ngFor="let data of datas" (click)="selectProjet(data)">\n                            <div>\n                              <img [class.selected]="data === selectedData" src={{data.image}} alt="" height=\'120px\'\n                                width=\'180px\'>\n                            </div>\n                          </a>\n                        </div>\n                        <div style="display: flex; align-items: center;">\n                          <button class="buttonScrollHorizontal" (click)="scrollRight()">\n                            <mat-icon class="iconClass">chevron_right</mat-icon>\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div\n                    style="display: flex;text-align: justify;flex-direction: column;margin-top: 20px;margin-left: 10px;margin-right: 10px;">\n                    <h3 style="font-weight: normal;"> {{name}} </h3>\n                    <h4 style="font-weight: normal;color: rgb( 252 , 204, 0);"> {{presentation}} </h4>\n                    <p> {{detail}} </p>\n                  </div>\n                </div>\n              </section>\n            </div> \n            <div class="col-md-3">\n              <section style="padding-bottom: 20px;">\n                <div class="titles">\n                  <h4 style="font-size: 20px;">ACTIVITES DU RESEAU</h4>\n                </div>\n                <div>\n                  <div style=" align-items: center; flex-direction: column; display: flex;justify-content: center;">\n                    <div class="embed-responsive embed-responsive-16by9">\n                      <input type="file" accept="" />\n                      <video controls autoplay></video>\n                      <video width="320" height="240" class="embed-responsive-item" controls>\n                        <source src="./../../assets/WhatsApp Video 2020-02-26 at 09.02.26.mp4" type="video/mp4">\n                      </video>\n                      \x3c!-- <iframe class="embed-responsive-item"\n                        src="frontend/src/assets/WhatsApp Video 2020-02-26 at 09.02.26.mp4" allowfullscreen=""></iframe> --\x3e\n                    </div>\n                  </div>\n                </div>\n              </section>\n              <nb-card style="height: 300px;">\n                <nb-card-header>\n                  ILS EN <span style="color: rgb( 252 ,  204, 0);">PARLENT</span>\n                </nb-card-header>\n                <nb-card-body>\n\n                  <div>\n                    <nb-list>\n                      <nb-list-item class="contact" *ngFor="let c of recent"\n                        style="padding-left: 0px; padding-right: 0px;">\n                        \x3c!-- <nb-user [picture]="c.user.picture" [name]="c.user.name" [title]="c.type" size="large">\n                        </nb-user>\n                        <span class="caption">{{ c.time | date: \'shortTime\' }}</span> --\x3e\n                        <div class="row" style="padding-left: 20px;">\n                          <div class="col-3" style="display: contents;">\n                            <img _ngcontent-lnx-c1="" alt="" class="teamImage" src={{c.user.picture}}>\n                          </div>\n                          <div class="col-9">\n                            <div>{{c.user.name}}</div>\n                            <div>\n                              "Commentaire"\n                            </div>\n                            <div>\n                              <nb-icon style="color: rgb( 252 , 204, 0);" icon="star"></nb-icon>\n                              <nb-icon style="color: rgb( 252 , 204, 0);" icon="star"></nb-icon>\n                              <nb-icon style="color: rgb( 252 , 204, 0);" icon="star"></nb-icon>\n                            </div>\n                            <div>\n                              <nb-icon style="color: #2e89ff;" icon="twitter"></nb-icon>\n                            </div>\n                          </div>\n                        </div>\n                      </nb-list-item>\n                    </nb-list>\n                  </div>\n                </nb-card-body>\n              </nb-card>\n              <nb-card>\n                <nb-card-body>\n                  <nb-calendar [(date)]="date" size="small">\n                  </nb-calendar>\n                </nb-card-body>\n              </nb-card>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      \x3c!-- Footer --\x3e\n      <footer class="page-footer font-small blue pt-4" style="background-color: black;padding-bottom: 20px;">\n        <div class="row" style="margin: 0px;">\n          <div class="col-md-3" style="display: flex;justify-content: center;">\n            <div style="flex: 1;display: flex;">\n              <a [routerLink]="[\'/pfm\']">\n                <img class="logo" width="140" height="70" src="../../assets/images/logomicrocap_1.png">\n              </a>\n            </div>\n          </div>\n          <div class="col-md-7" style="flex-direction: column;display: flex;">\n            <div style="flex:1;display: flex;align-items: center;">\n              <ul class="nav justify-content-center">\n                <li class="nav-item">\n                  <a class="nav-links-end" href="#">Mentions l\xe9gales</a>\n                </li>\n                <li class="nav-item">\n                  <a class="nav-links-end" href="#">CGU</a>\n                </li>\n                <li class="nav-item">\n                  <a class="nav-links-end" href="#">Plan du site</a>\n                </li>\n                <li class="nav-item">\n                  <a class="nav-links-end" href="#">News letter</a>\n                </li>\n                <li class="nav-item">\n                  <a class="nav-links-end" href="#">Support</a>\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div class="col-md-2"\n            style="flex-direction: column;align-items: center;display: flex;">\n            <div class="row" style="width: 100%;display: flex;padding-top: 20px;">\n              <div >\n                <nb-action icon="pin"></nb-action>\n              </div>\n              <div style="margin-left: 30px;">\n                <nb-action icon="share"></nb-action>\n              </div>\n              <div style="margin-left: 30px;">\n                <nb-action icon="link"></nb-action>\n              </div>\n            </div>\n            <div class="row" style="width: 100%;display: flex;padding-top: 20px;">\n              <p style="margin-bottom: 0px;color: #8f9bb3;">copyright@</p>\n            </div>\n          </div>\n        </div>\n      </footer>\n      \x3c!-- Footer --\x3e\n    </div>\n  </nb-layout-column>\n</nb-layout>'},O1GV:function(e,n){e.exports='<div class="card">\n <div style="display: flex;justify-content: space-between;">\n  <div>\n    \x3c!-- <img src="./../../../assets/images/logomicrocap_1.png" alt=""> --\x3e\n  </div>\n  <a style="cursor: pointer;" (click)="close()" >\n   <nb-icon icon="times" pack="fa"></nb-icon>\n  </a>\n </div>\n <div class="row">\n  <div class="col-md-12" style="display: flex;justify-content: center;align-items: center;flex-direction: column;">\n   <img src={{image}} alt="" height="180px" width="180px">\n   <div>\n    <h3> {{titre}} </h3>\n   </div>\n   <p style="text-align: center;">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras convallis tincidunt\n    tincidunt. Vestibulum\n    vulputate\n    maximus massa vel tristique. Suspendisse potenti. Duis aliquet purus sed dictum dictum. Donec fringilla, purus at\n    fermentum imperdiet, velit enim malesuada turpis, quis luctus arcu arcu nec orci. Duis eu mattis felis. Quisque\n    sollicitudin elementum nunc vel tincidunt. Vestibulum egestas mi nec iaculis varius. Morbi in risus sed sapien\n    ultricies feugiat. Quisque pulvinar mattis purus, in aliquet massa aliquet et.</p>\n\n  </div>\n </div>\n</div>'},Y5Hk:function(e,n){e.exports='<div style="margin-top: 80px; display: block;">\n  <div class="row">\n    <div class="col-md-12">\n      <ngb-carousel style="display:flex;margin-bottom: 20px;height: 650px;background: #615c5c;">\n        <ng-template ngbSlide *ngFor="let item of items">\n          <div class="fill">\n            <img src="item.image" alt="Urgence 35" class="scaled">\n            <div class="carousel-caption"\n              style="background-color: rgba(255, 255, 255, 0.575);border-radius: 80px;margin-bottom: 40px;">\n              <h3>{{item.description}}</h3>\n              <p>{{item.detail}}</p>\n            </div>\n          </div>\n        </ng-template>\n      </ngb-carousel>\n    </div>\n  </div>\n  <div class="row" style="padding-top: 100px;" id="microcap">\n    <div class="col-md-9" >\n      <nb-card accent="warning">\n        <nb-card-header>Microcap</nb-card-header>\n        <nb-card-body>\n          <div class="lineDs">\n            <div style="display: flex;flex-direction: column; flex: 1;">\n              <div class="barTitle">\n                <h5 style="color: white;">A propos de Microcap</h5>\n              </div>\n              <div class="row marge" style="margin-bottom: 30px;">\n                <div class="col-sm-4 col-md-4">\n                  <img src="./../../../assets/images/kitten-default.png" alt="" height=\'100px\'>\n                </div>\n                <div class="col-sm-8 col-md-8">\n\n                  <article>\n                    <h2>Description</h2>\n                    <p>jksdjs sdf sdfsdfsd fsdfsd fsdf sdf sdfsdfsd dsdsdsd dsd sds d sd sdsdsd sd sds,lfd jlfjsdfj\n                      jjsdf\n                      jkljez kljdfskd jksdjfksjdfsdfsdf</p>\n                    <h2>Description</h2>\n                    <p>jksdjs sdf sdfsdfsd fsdfsd fsdf sdf sdfsdfsd dsdsdsd dsd sds d sd sdsdsd sd sds,lfd jlfjsdfj\n                      jjsdf\n                      jkljez kljdfskd jksdjfksjdfsdfsdf</p>\n                  </article>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class="lineDs">\n            <div style="display: flex;flex-direction: column; flex: 1;">\n              <div class="barTitle">\n                <h5 style="color: white;">Service de Microcap</h5>\n              </div>\n              <div class="row marge" style="margin-bottom: 30px;">\n                <div class="col-lg-4 col-md-6 col-sm-12" style="display: flex;flex-direction: column;flex: 1;">\n                  <img src="./../../../assets/images/kitten-default.png" alt="" style="height: 225px;">\n                  <div style="flex: 1;margin: 20px;">\n                    <article>\n                      <h2 style="margin-bottom: 10px; text-align: center;">Description</h2>\n                      <p>jksdjs sdf sdfsdfsd fsdfsd fsdf sdf sdfsdfsd dsdsdsd dsd sds d sd sdsdsd sd sds,lfd jlfjsdfj\n                        jjsdf jkljez kljdfskd jksdjfksjdfsdfsdf</p>\n                    </article>\n                  </div>\n                </div>\n                <div class="col-lg-4 col-md-6 col-sm-12" style="display: flex;flex-direction: column;flex: 1;">\n                  <img src="./../../../assets/images/kitten-default.png" alt="" style="height: 225px;">\n                  <div style="flex: 1;margin: 20px;">\n                    <article>\n                      <h2 style="margin-bottom: 10px; text-align: center;">Description</h2>\n                      <p>jksdjs sdf sdfsdfsd fsdfsd fsdf sdf sdfsdfsd dsdsdsd dsd sds d sd sdsdsd sd sds,lfd jlfjsdfj\n                        jjsdf jkljez kljdfskd jksdjfksjdfsdfsdf</p>\n                    </article>\n                  </div>\n                </div>\n                <div class="col-lg-4 col-md-6 col-sm-12" style="display: flex;flex-direction: column;flex: 1;">\n                  <img src="./../../../assets/images/kitten-default.png" alt="" style="height: 225px;">\n                  <div style="flex: 1;margin: 20px;">\n                    <article>\n                      <h2 style="margin-bottom: 10px; text-align: center;">Description</h2>\n                      <p>jksdjs sdf sdfsdfsd fsdfsd fsdf sdf sdfsdfsd dsdsdsd dsd sds d sd sdsdsd sd sds,lfd jlfjsdfj\n                        jjsdf jkljez kljdfskd jksdjfksjdfsdfsdf</p>\n                    </article>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class="lineDs">\n            <div class="barTitle">\n              <h5 style="color: white;">Gestion en \xe9quipe</h5>\n            </div>\n            <div class="row marge teamGestion">\n              <mdb-carousel class="carousel slide carousel-fade" [animation]="\'fade\'">\n                <mdb-carousel-item>\n                  <div class="d-block w-100">\n                    <div class="row" style="margin-bottom: 20px;margin-top: 20px;">\n                      <div class="col-md-4 col-sm-4 offset-md-2 offset-sm-2" style="display: flex;flex-direction: column;flex: 1;">\n                        <div class="cardTeamGestion">\n                          <div class="row">\n                            <div class="col-sm-12 col-md-12 col-lg-4" style="display: flex;justify-content: center;">\n                              <img src="./../../../assets/images/nick.png" alt="" class="teamImage">\n                            </div>\n                            <div class="col-sm-12 col-md-12 col-lg-8" style="display: flex;justify-content: center;">\n                              <div class="teamGroup">\n                                <article>\n                                  <h5>Alex Balwin</h5>\n                                  <p>Pr\xe9sident du Directoire</p>\n                                  <p>\n                                    <span style="color: rgb(123, 123, 123); font-family:Arial, Helvetica, sans-serif; text-transform: none;">\n                                      Ex DG de Moneytel</span><br>\n                                  </p>\n                                </article>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div class="col-md-4 col-sm-4" style="display: flex;flex-direction: column;flex: 1;">\n\n                        <div class="cardTeamGestion">\n                          <div class="row">\n                            <div class="col-sm-12 col-md-12 col-lg-4" style="display: flex;justify-content: center;">\n                              <img src="./../../../assets/images/lee.png" alt="" class="teamImage">\n                            </div>\n                            <div class="col-sm-12 col-md-12 col-lg-8" style="display: flex;justify-content: center;">\n                              <div class="teamGroup">\n                                <article>\n                                  <h5>Thierry Cabral</h5>\n                                  <p>Directeur du r\xe9seau</p>\n                                  <p>\n                                    <span style="color: rgb(123, 123, 123); font-family:Arial, Helvetica, sans-serif; text-transform: none;">\n                                      7 ans comme community manager chez Morgan & Fr\xe8res</span><br>\n                                  </p>\n                                </article>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </mdb-carousel-item>\n                <mdb-carousel-item>\n                  <div class="d-block w-100">\n                    <div class="row" style="margin-bottom: 20px;margin-top: 20px;">\n                      <div class="col-md-4 col-sm-4 offset-md-2 offset-sm-2" style="display: flex;flex-direction: column;flex: 1;">\n                        <div class="cardTeamGestion">\n                          <div class="row">\n                            <div class="col-sm-12 col-md-12 col-lg-4" style="display: flex;justify-content: center;">\n                              <img src="./../../../assets/images/nick.png" alt="" class="teamImage">\n                            </div>\n                            <div class="col-sm-12 col-md-12 col-lg-8" style="display: flex;justify-content: center;">\n                              <div class="teamGroup">\n                                <article>\n                                  <h5>Ngongo Felix</h5>\n                                  <p>Team mananger</p>\n                                </article>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div class="ccol-md-4 col-sm-4" style="display: flex;flex-direction: column;flex: 1;">\n                        <div class="cardTeamGestion">\n                          <div class="row">\n                            <div class="col-sm-12 col-md-12 col-lg-4" style="display: flex;justify-content: center;">\n                              <img src="./../../../assets/images/eva.png" alt="" class="teamImage">\n                            </div>\n                            <div class="col-sm-12 col-md-12 col-lg-8" style="display: flex;justify-content: center;">\n                              <div class="teamGroup">\n                                <article>\n                                  <h5>Bruce Wayne</h5>\n                                  <p>Directeur Wayne Enterprise</p>\n                                  <p><span style="color: rgb(123, 123, 123); font-family:Arial, Helvetica, sans-serif; text-transform: none;">\n                                    Alias????.........</span><br></p>\n                                </article>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </mdb-carousel-item>\n                \x3c!-- <mdb-carousel-item>\n                  <div class="d-block w-100">\n                    <div class="row">\n                      <div class="col-md-3 offset-md-2" style="display: flex;flex-direction: column;flex: 1;">\n                        <nb-card>\n                          <img src="./../../../assets/images/kitten-default.png" alt="" style="height: 225px;">\n                          <div style="flex: 1;margin: 20px;">\n                            <article style="height: 100px;">\n                              <h5 style="text-align: center;">Thierry Cabral</h5>\n                              <p style="text-align: center;">Directeur du reseau</p>\n                              <p style="text-align: center;">7 ans comme community manager chez morgan et rex</p>\n                            </article>\n                          </div>\n                        </nb-card>\n                      </div>\n                      <div class="col-md-3 offset-md-2" style="display: flex;flex-direction: column;flex: 1;">\n                        <nb-card>\n                          <img src="./../../../assets/images/kitten-default.png" alt="" style="height: 225px;">\n                          <div style="flex: 1;margin: 20px;">\n                            <article style="height: 100px;">\n                              <h5 style="text-align: center;">Alex Bawin</h5>\n                              <p style="text-align: center;">Ex directeur de Moneytel</p>\n                            </article>\n                          </div>\n                        </nb-card>\n                      </div>\n                    </div>\n                  </div>\n                </mdb-carousel-item> --\x3e\n              </mdb-carousel>\n            </div>\n          </div>\n        </nb-card-body>\n      </nb-card>\n    </div>\n    <div class="col-md-3">\n      <nb-card>\n        <nb-card-header>Social</nb-card-header>\n        <nb-card-body>\n          <div style=" align-items: center; flex-direction: column; display: flex;justify-content: center;">\n            <video width="300" controls>\n              <source src="mov_bbb.mp4" type="video/mp4">\n              <source src="mov_bbb.ogg" type="video/ogg">\n              Your browser does not support HTML5 video.\n            </video>\n            <div style="margin-bottom: 20px;margin-top: 20px;">\n              <button class="button btn btn-success ">Envoyer \xe0 un ami</button>\n            </div>\n          </div>\n          <div>\n            <div\n              style="display: flex;justify-content: center;align-items: center;background: #f6aa30;margin-bottom: 30px;margin-top: 30px;">\n              <h5 style="color: white;">Il en parle</h5>\n            </div>\n            <div class="row">\n              <div>\n                <ul>\n                  <li>\n                    <a href="">Alain, entrepreneur</a>\n                  </li>\n                  <li>\n                    <a href="">judith \xe0 paris</a>\n                  </li>\n                  <li>\n                    <a href="">Noel \xe0 Yaounde</a>\n                  </li>\n                  <li>\n                    <a href="">Cedric \xe0 Toronto</a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </nb-card-body>\n      </nb-card>\n    </div>\n  </div>\n  <div class="row">\n    <div class="col-sm-6">\n      <ng-template #card>\n        <nb-card class="popover-card">\n          <nb-card-header status="warning">\n            Description du projet\n          </nb-card-header>\n          <nb-card-body>\n            {{description}}\n          </nb-card-body>\n        </nb-card>\n      </ng-template>\n    </div>\n    <div class="col-md-9" style="padding-top: 190px;;" id="projet" >\n      <nb-card accent="warning">\n        <nb-card-header>\n          Projets\n        </nb-card-header>\n        <nb-card-body>\n          <div style="display: flexbox;flex-direction: column; ">\n            <div style="flex: 1; margin: 20px; overflow: scroll;background-color: #dedede;\ndisplay: flex;">\n              <div class="row" style="height: 300px;">\n                <div *ngFor="let data of datas" [nbPopover]="card" (click)="onSelected(data)" class="col-md-3"\n                  style="display: flex;justify-content: center;">\n                  <nb-card\n                    style="display: flex;flex-direction: column;width: 150px;margin-bottom: 30px;margin-top: 30px;">\n                    <img src={{data.image}} alt="" height=\'100px\'>\n                    <div style="flex: 1;">\n                      <p> {{data.nom}} </p>\n                    </div>\n                  </nb-card>\n                </div>\n              </div>\n            </div>\n            \x3c!-- <div style="flex: 1;margin: 20px;">\n              <h4>Description du projet selection\xe9</h4>\n              <p>{{description}}</p>\n            </div> --\x3e\n          </div>\n        </nb-card-body>\n      </nb-card>\n    </div>\n  </div>\n  <div class="row">\n    <div class="col-sm-6">\n      <ng-template #card>\n        <nb-card class="popover-card">\n          <nb-card-header status="warning">\n            Description du projet\n          </nb-card-header>\n          <nb-card-body>\n            {{description}}\n          </nb-card-body>\n        </nb-card>\n      </ng-template>\n    </div>\n    <div class="col-md-9" style="padding-top: 20px;" id="entreprise">\n      <nb-card accent="warning">\n        <nb-card-header>\n          Entreprises\n        </nb-card-header>\n        <nb-card-body>\n          <div style="display: flexbox;flex-direction: column; ">\n            <div style="flex: 1; margin: 20px; overflow: scroll;background-color: #dedede;\ndisplay: flex;">\n              <div class="row" style="height: 300px;">\n                <div *ngFor="let data of datas" [nbPopover]="card" (click)="onSelected(data)" class="col-3"\n                  style="display: flex;justify-content: center;">\n                  <nb-card\n                    style="display: flex;flex-direction: column;width: 150px;margin-bottom: 30px;margin-top: 30px;">\n                    <img src={{data.image2}} alt="" height=\'100px\'>\n                    <div style="flex: 1;">\n                      <p> {{data.nom}} </p>\n                    </div>\n                  </nb-card>\n                </div>\n              </div>\n            </div>\n            \x3c!-- <div style="flex: 1;margin: 20px;">\n              <h4>Description du projet selection\xe9</h4>\n              <p>{{description}}</p>\n            </div> --\x3e\n          </div>\n        </nb-card-body>\n      </nb-card>\n    </div>\n  </div>\n</div>'},sOZF:function(e,n){e.exports="/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/*\n  Declare variables before making them global.\n  dart-sass doesn't allow to declare variable with !global.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host instead of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-default :host ::ng-deep router-outlet + * {\n  display: block;\n  -webkit-animation: fade 1s;\n          animation: fade 1s; }\n@-webkit-keyframes fade {\n  from {\n    opacity: 0; }\n  to {\n    opacity: 1; } }\n@keyframes fade {\n  from {\n    opacity: 0; }\n  to {\n    opacity: 1; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host instead of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-dark :host ::ng-deep router-outlet + * {\n  display: block;\n  -webkit-animation: fade 1s;\n          animation: fade 1s; }\n@keyframes fade {\n  from {\n    opacity: 0; }\n  to {\n    opacity: 1; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host instead of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-cosmic :host ::ng-deep router-outlet + * {\n  display: block;\n  -webkit-animation: fade 1s;\n          animation: fade 1s; }\n@keyframes fade {\n  from {\n    opacity: 0; }\n  to {\n    opacity: 1; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host instead of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-corporate :host ::ng-deep router-outlet + * {\n  display: block;\n  -webkit-animation: fade 1s;\n          animation: fade 1s; }\n@keyframes fade {\n  from {\n    opacity: 0; }\n  to {\n    opacity: 1; } }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host instead of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-aquamarine :host ::ng-deep router-outlet + * {\n  display: block;\n  -webkit-animation: fade 1s;\n          animation: fade 1s; }\n@keyframes fade {\n  from {\n    opacity: 0; }\n  to {\n    opacity: 1; } }\n.textTitle1 {\n  color: white;\n  text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000; }\n.example p {\n  margin: 0;\n  /* Starting position */\n  -webkit-transform: translateX(100%);\n  transform: translateX(100%);\n  /* Apply animation to this element */\n  -webkit-animation: example 30s linear infinite;\n  animation: example 30s linear infinite; }\n/* Move it (define the animation) */\n@-webkit-keyframes example {\n  0% {\n    -webkit-transform: translateX(100%); }\n  100% {\n    -webkit-transform: translateX(-100%); } }\n@keyframes example {\n  0% {\n    /* Firefox bug fix */\n    -webkit-transform: translateX(100%);\n    /* Firefox bug fix */\n    transform: translateX(100%); }\n  100% {\n    /* Firefox bug fix */\n    -webkit-transform: translateX(-100%);\n    /* Firefox bug fix */\n    transform: translateX(-100%); } }\n.btn-outline-success {\n  color: #fccc00;\n  background-color: #ffffff00;\n  border-color: #ffffff; }\n.btn-outline-success:hover {\n  color: #fccc00;\n  background-color: #ffffff;\n  border-color: #ffffff; }\n.nav-links-lang {\n  margin: 10px;\n  padding: 4px;\n  min-height: 0px;\n  border-radius: 4px;\n  margin-bottom: 30px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);\n  background-color: white; }\n.nav-linkx {\n  font-size: 13px;\n  line-height: 23px;\n  text-decoration: none;\n  padding: 0 10px;\n  margin: 0 2px;\n  font-weight: normal;\n  display: inline-block;\n  color: white; }\n.nav-linkx:hover {\n  font-size: 13px;\n  line-height: 23px;\n  text-decoration: none;\n  padding: 0 10px;\n  margin: 0 2px;\n  display: inline-block;\n  color: #fccc00; }\n.nav-links {\n  font-size: 13px;\n  line-height: 23px;\n  text-decoration: none;\n  padding: 0 10px;\n  margin: 0 2px;\n  font-weight: normal;\n  display: inline-block;\n  color: #292929; }\n.nav-links:hover {\n  font-size: 13px;\n  line-height: 23px;\n  text-decoration: none;\n  padding: 0 10px;\n  margin: 0 2px;\n  display: inline-block;\n  color: #fccc00; }\n.nav-links-end {\n  font-size: 13px;\n  line-height: 23px;\n  text-decoration: none;\n  padding: 0 10px;\n  margin: 0 2px;\n  font-weight: normal;\n  display: inline-block;\n  color: white; }\n.nav-links-end:hover {\n  font-size: 13px;\n  line-height: 23px;\n  text-decoration: none;\n  padding: 0 10px;\n  margin: 0 2px;\n  display: inline-block;\n  color: #fccc00; }\n.verticalLine {\n  display: flex;\n  background: #fccc00;\n  width: 70px;\n  height: 5px; }\n.cardService {\n  padding-top: 30px;\n  padding-bottom: 30px;\n  background-color: #fccc00;\n  min-height: 0px;\n  border-radius: 10px;\n  margin-bottom: 30px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);\n  text-align: center; }\n.imgMicro {\n  width: inherit;\n  height: inherit;\n  background-color: #fff;\n  min-height: 0px; }\n.details {\n  padding: 1rem 1.25rem; }\n.description {\n  color: #192038;\n  font-family: Open Sans,sans-serif;\n  font-size: .9375rem;\n  font-weight: normal;\n  line-height: 1.25rem;\n  text-align: justify; }\n.navbar-light .navbar-nav .nav-link {\n  color: white;\n  font-weight: bolder;\n  font-size: 15px; }\n.navbar-light .navbar-nav .nav-link:hover {\n  color: #2e2e2e;\n  font-weight: bold; }\n.right-menu {\n  float: left; }\n.bg-light {\n  background-color: #ffffff !important; }\na {\n  text-decoration: none;\n  cursor: pointer; }\n.logo {\n  margin-right: 3em; }\n.menu-item {\n  padding-right: 2em;\n  color: #333; }\n.menu-item:hover {\n  color: #000;\n  font-weight: normald; }\n/**\n * Header\n *---------------*/\n.admin-header {\n  width: 100%;\n  margin-left: -10px;\n  margin-right: -10px; }\n.admin-header, .admin-header .logo-container, .admin-header .expansion {\n    display: flex;\n    flex-direction: column;\n    flex: 1; }\n.admin-header ::ng-deep nb-user .user-name {\n    text-transform: capitalize; }\n.admin-header .flex-grow {\n    flex-grow: 1; }\n/**\n * Main viewport\n */\nnb-layout-column ::ng-deep .tabset {\n  font-size: 1.1rem; }\nnb-layout-column ::ng-deep .tabset .tab.active a {\n    font-weight: normal; }\n/**\n * Fixes\n *---------------*/\nnb-layout-header.fixed {\n  top: 0; }\nnb-sidebar ::ng-deep .main-container-fixed {\n  top: 4.75rem; }\nnb-sidebar ::ng-deep .menu-icon {\n  margin-right: 0.25rem !important; }\n.btnTop {\n  border-right-color: #a7a7a7;\n  border-right-style: solid;\n  padding-right: 10px;\n  margin-right: 10px;\n  border-right-width: 2px; }\nheader {\n  padding: 156px 0 0px; }\nsection {\n  padding: 175px 0;\n  padding: 175px 0;\n  background-color: white;\n  min-height: 0px;\n  border-radius: 4px;\n  margin-bottom: 30px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);\n  padding-left: 20px;\n  padding-right: 20px; }\n.titles {\n  border-left-style: solid;\n  border-left-width: 40px;\n  color: #fccc00;\n  padding-left: 20px;\n  height: 70px;\n  display: flex;\n  align-items: center;\n  background-color: black;\n  min-height: 0px;\n  border-radius: 4px;\n  margin-bottom: 30px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16); }\n.titles h4 {\n  color: white;\n  margin-bottom: 0px; }\nngb-carousel .picsum-img-wrapper {\n  position: relative;\n  display: block;\n  height: 100px;\n  padding-top: 55%;\n  /* Keep ratio for 900x500 images */ }\nngb-carousel .picsum-img-wrapper > img {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0; }\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n.barTitle {\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 30px;\n  margin-bottom: 70px;\n  background: #fccc00; }\n.marge {\n  margin-left: 30px;\n  margin-right: 30px; }\n.lineDs {\n  display: flex;\n  flex-direction: column;\n  padding-top: 20px;\n  justify-content: center;\n  margin-left: -12px;\n  margin-right: -12px; }\n.teamGestion {\n  margin-bottom: 30px;\n  background-repeat: round;\n  padding-top: 20px;\n  background-position-y: -522px;\n  background-position-x: -140px;\n  display: block;\n  padding-bottom: 20px;\n  margin-right: 0px;\n  background-repeat: no-repeat;\n  margin-left: 0px; }\n.cardTitle {\n  padding: 40px 30px 30px;\n  color: black;\n  background-color: #fff;\n  min-height: 0px;\n  border-radius: 4px;\n  margin-bottom: 30px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16); }\n.cardTeamGestion {\n  min-height: 0px;\n  border-radius: 4px;\n  color: white;\n  margin-bottom: 30px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16); }\n.cardTeamGestion p {\n  font-size: 11px;\n  color: #fccc00;\n  letter-spacing: 0px;\n  font-weight: normal;\n  margin-bottom: 0px; }\n.cardTeamGestion h5 {\n  font-weight: normal;\n  letter-spacing: -0.5px;\n  color: white; }\n.verticalLineWhite {\n  display: flex;\n  background: white;\n  width: 70px;\n  height: 4px;\n  margin-bottom: 4px;\n  margin-top: 4px; }\n.teamGroup {\n  margin-bottom: 10px; }\n.teamImage {\n  height: 50px;\n  width: 50px;\n  border-radius: 100vh; }\n.teamImages {\n  height: 80px;\n  width: 80px;\n  border-radius: 100vh; }\n.info-widget {\n  width: 100%;\n  padding: 20px;\n  display: inline-block; }\n.middle a {\n  width: 100%;\n  padding: 20px;\n  display: inline-block; }\n.middle .selected {\n  border-radius: 10px;\n  height: 260px;\n  width: 300px;\n  border-bottom-style: solid;\n  border-bottom-width: 20px;\n  padding-bottom: 10px;\n  border-bottom-color: #fccd33; }\n.carousel-caption h3 {\n  color: white;\n  font-size: 70px;\n  text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000; }\n.carousel-caption p {\n  margin-top: 20px;\n  color: white;\n  font-size: 20px;\n  font-weight: normal;\n  text-shadow: -1px -1px 0 #383838, 1px -1px 0 #797979, -1px 1px 0 #3e3d3d, 1px 1px 0 #313131; }\n.info-widget img {\n  min-height: 0px;\n  border-radius: 10px;\n  color: white;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16); }\n.iconClass {\n  height: 70px;\n  width: 70px;\n  font-size: 70px;\n  color: #fccc00; }\n.buttonScrollHorizontal {\n  border: none;\n  border-radius: 100px;\n  height: 70px;\n  width: 70px;\n  justify-content: center;\n  display: flex;\n  background-color: #ffffff00; }\n.middle {\n  float: left;\n  width: 90%;\n  overflow: auto;\n  /*will change this to hidden later to deny scolling to user*/\n  white-space: nowrap; }\n.middle ::-webkit-scrollbar-thumb {\n  background: none; }\nnb-card-body {\n  margin: 0 -0.5rem; }\nnb-card-body button,\n  nb-card-body p {\n    margin: 0.5rem 0.5rem 0; }\n.popover-card {\n  margin: 0;\n  max-width: 20rem; }\nngb-carousel .fill {\n  display: block; }\nngb-carousel .fill {\n  display: block;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden; }\nngb-carousel .fill > img {\n  flex-shrink: 0;\n  min-width: 100%;\n  min-height: 100%; }\n.picture {\n  background-position: center;\n  background-size: cover;\n  position: relative;\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n  flex: 1; }\n/* Handle on hover */\n::-webkit-scrollbar-thumb:hover {\n  background: #f6aa30; }\n/* width */\n::-webkit-scrollbar {\n  width: 10px; }\n/* Track */\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 5px white; }\n/* Handle */\n::-webkit-scrollbar-thumb {\n  background: none; }\n#NavSmall {\n  display: none; }\n#NavBig {\n  display: block; }\n@media (max-width: 992px) {\n  #NavSmall {\n    display: block; }\n  p {\n    color: black; }\n  h4 {\n    color: black; }\n  .mobileMenu {\n    padding: 20px;\n    background-color: #131212;\n    display: flex;\n    flex-direction: row;\n    height: 300px;\n    overflow-y: auto; }\n  .nav-link {\n    color: #fecc00;\n    font-weight: bolder;\n    font-size: 15px; }\n  .nav-link:hover {\n    color: #fdfdfd;\n    font-weight: bold; }\n  header {\n    padding: 100px 0 0px; }\n  #NavBig {\n    display: none; } }\n"},tmkR:function(e,n,t){"use strict";t.r(n);var s=t("mrSG"),o=t("CcnG"),i=t("Ip0R"),a=t("pBvS"),l=(function(){function e(){}e=s.c([Object(o.n)({selector:"ngx-popover-tabs",template:'\n    <nb-tabset>\n      <nb-tab tabTitle="What\'s up?">\n        <div class="p-4">\n          Such a wonderful day!\n        </div>\n      </nb-tab>\n      <nb-tab tabTitle="Second Tab">\n        <div class="p-4">\n          Indeed!\n        </div>\n      </nb-tab>\n    </nb-tabset>\n  '})],e)}(),function(){function e(){}e=s.c([Object(o.n)({selector:"ngx-popover-form",template:'\n    <div class="p-4">\n      <form>\n        <div class="form-group">\n          <input type="text" class="form-control" placeholder="Recipients">\n        </div>\n        <div class="form-group">\n          <input type="text" class="form-control" placeholder="Subject">\n        </div>\n        <div class="form-group">\n          <textarea class="form-control" placeholder="Message"></textarea>\n        </div>\n        <button type="submit" class="btn btn-primary w-100">Send</button>\n      </form>\n    </div>\n  '})],e)}(),function(){function e(){}return s.c([Object(o.G)(),s.f("design:type",Object)],e.prototype,"description",void 0),e=s.c([Object(o.n)({selector:"ngx-popover-card",template:'\n    <nb-card class="popover-card">\n      <nb-card-header status="warning">\n        Description du projet\n      </nb-card-header>\n      <nb-card-body>\n        {{description}}\n      </nb-card-body>\n    </nb-card>\n  ',styles:["\n    nb-card {\n      margin: 0;\n      max-width: 20rem;\n    }\n  "]})],e)}()),r=function(){function e(){this.cardComponent=l,this.items=a.b,this.datas=a.a,this.description="Cliquer sur un projet pour avoir sa description"}return e.prototype.ngOnInit=function(){},e.prototype.onSelected=function(e){this.description=e.detail},e=s.c([Object(o.n)({selector:"app-accueil",template:t("Y5Hk"),styles:[t("1DUX")]}),s.f("design:paramtypes",[])],e)}(),c=t("ZYCi"),d=t("Xk95"),h=t("jvbL"),p=t("K9Ia"),m=t("VNr4"),u=t("tMhG"),b=function(){function e(e,n){this.ref=n,this.evaIcons=[],this.evaIcons=Array.from(e.getPack("eva").icons.keys()).filter(function(e){return-1===e.indexOf("outline")}),e.registerFontPack("fa",{packClass:"fa",iconClassPrefix:"fa"}),e.registerFontPack("far",{packClass:"far",iconClassPrefix:"fa"}),e.registerFontPack("ion",{iconClassPrefix:"ion"})}return e.prototype.ngOnInit=function(){console.log(this.data),this.id=this.data.id,this.image=this.data.image,this.titre=this.data.titre,this.description=this.data.description},e.prototype.close=function(){this.ref.close()},e.ctorParameters=function(){return[{type:d.s},{type:d.q}]},s.c([Object(o.G)(),s.f("design:type",Object)],e.prototype,"data",void 0),e=s.c([Object(o.n)({selector:"app-modalbox",template:t("O1GV"),styles:[t("vGk/")]}),s.f("design:paramtypes",[d.s,d.q])],e)}(),f=function(){function e(e,n){var t=this;this.userService=e,this.dialogService=n,this.destroy$=new p.b,this.userPictureOnly=!1,this.messageup='"Notification d\xe9fiantes. exemple " fr\xe9deric de champigny vient de rejoindre le r\xe9seau microCap" ..... "le projet manioc a collect\xe9 6000 \u20ac en 24H""',this.cardComponent=l,this.imagedata=[{id:"1",image:"./../../../assets/Illustration/Illustration 3 - MicroCap-03.png",titre1:"L'open",titre2:"",description:""},{id:"2",image:"./../../../assets/Illustration/Illustration 3 - MicroCap-04.png",titre1:"Le",titre2:"",description:""},{id:"3",image:"./../../../assets/Illustration/Illustration 3 - MicroCap-05.png",titre1:"Le blue",titre2:"",description:""},{id:"4",image:"./../../../assets/Illustration/Illustration 3 - MicroCap-06.png",titre1:"Le professionnal",titre2:"",description:""},{id:"5",image:"./../../../assets/Illustration/Illustration 3 - MicroCap-07.png",titre1:"Le business",titre2:"",description:""}],this.alive=!0,this.date=new Date,this.datas=a.a,this.description="Cliquer sur un projet pour avoir sa description",this.height="120px",this.width="180px",this.show=!1,this.searched=!1,Object(m.a)(this.userService.getContacts(),this.userService.getRecentUsers()).pipe(Object(h.a)(function(){return t.alive})).subscribe(function(e){var n=e[0],s=e[1];t.contacts=n,t.recent=s})}return e.prototype.ngOnInit=function(){this.onSelected(this.datas[1]),this.name=this.datas[1].name,this.presentation=this.datas[1].presentation,this.detail=this.datas[1].detail},e.prototype.onSelected=function(e){this.description=e.detail},e.prototype.scrollRight=function(){this.widgetsContent.nativeElement.scrollTo({left:this.widgetsContent.nativeElement.scrollLeft+150,behavior:"smooth"})},e.prototype.scrollLeft=function(){this.widgetsContent.nativeElement.scrollTo({left:this.widgetsContent.nativeElement.scrollLeft-150,behavior:"smooth"})},e.prototype.selectProjet=function(e){this.height="240px",this.width="360px",this.selectedData=e,this.name=e.name,this.presentation=e.presentation,this.detail=e.detail},e.prototype.openDetai=function(e){this.dialogService.open(b,{context:{data:e}})},e.prototype.toggle=function(){this.show?this.show=!1:this.show=!0},e.prototype.hide=function(){this.show=!1},e.prototype.search=function(){this.searched?this.searched=!1:this.searched=!0},e.ctorParameters=function(){return[{type:u.a},{type:d.r}]},s.c([Object(o.pb)("widgetsContent",{static:!0}),s.f("design:type",o.u)],e.prototype,"widgetsContent",void 0),e=s.c([Object(o.n)({selector:"app-vitrinetest",template:t("1zF3"),styles:[t("sOZF")]}),s.f("design:paramtypes",[u.a,d.r])],e)}(),x=[{path:"",component:f,children:[{path:"",redirectTo:"accueil",pathMatch:"full"},{path:"accueil",component:r}]}],w=function(){function e(){}return e=s.c([Object(o.M)({imports:[c.e.forChild(x)],exports:[c.e]})],e)}(),g=t("gIcY"),v=t("4GxJ"),y=t("vTDv"),k=t("OMr1"),L=t("4tE/"),A=t("6Wmm"),j=t("BgWK"),I=t("UodH"),R=t("u7R8"),T=t("FVSy"),C=t("de3e"),S=t("/dO6"),F=t("wmQ5"),M=t("jQLj"),P=t("o3x0"),W=t("LC5p"),O=t("jlZm"),z=t("r43C"),D=t("SMsm"),B=t("b716"),G=t("0/Q6"),q=t("mVsa"),E=t("Wf4p"),_=t("4epT"),$=t("Z+uX"),X=t("Blfk"),N=t("9It4"),H=t("uGex"),V=t("Nsh5"),U=t("w+lc"),K=t("kWGw"),Q=t("vARd"),Y=t("OkvK"),J=t("BHnd"),Z=t("La40"),ee=t("8mMr"),ne=t("v9Dh"),te=t("J12g"),se=t("4c35"),oe=t("qAlS");t.d(n,"VitrinetestModule",function(){return ie});var ie=function(){function e(){}return e=s.c([Object(o.M)({declarations:[r,f,l,b],imports:[k.a.forRoot(),y.a,i.b,w,c.e,d.x,d.H,i.b,d.l,d.L,d.f,d.y,d.A,d.N,d.g,d.u,d.m,d.D,d.G,d.o.forRoot(),d.C,d.n,d.p.forRoot(),d.X.forChild(),d.F,d.W,d.j,d.h,d.K,g.l,d.t,d.k,v.c.forRoot(),L.a,A.a,j.a,I.a,R.a,T.a,C.a,S.a,F.a,M.a,P.b,W.a,O.a,z.a,D.a,B.b,G.a,q.a,E.m,_.a,$.a,X.a,N.a,E.t,H.a,V.a,U.a,K.a,Q.a,Y.b,J.b,Z.a,ee.a,ne.a,te.c,se.h,oe.c],entryComponents:[l,b]})],e)}()},"vGk/":function(e,n){e.exports="/*!\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/*\n  Declare variables before making them global.\n  dart-sass doesn't allow to declare variable with !global.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host instead of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-default :host nb-card {\n  max-width: 600px;\n  max-height: 500px; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host instead of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-dark :host nb-card {\n  max-width: 600px;\n  max-height: 500px; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host instead of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-cosmic :host nb-card {\n  max-width: 600px;\n  max-height: 500px; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host instead of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-corporate :host nb-card {\n  max-width: 600px;\n  max-height: 500px; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host instead of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-aquamarine :host nb-card {\n  max-width: 600px;\n  max-height: 500px; }\n.card {\n  max-width: 600px;\n  max-height: 500px;\n  padding: 40px 30px 30px;\n  color: black;\n  background-color: #fff;\n  min-height: 0px;\n  border-radius: 10px;\n  margin-bottom: 30px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16); }\n"}}]);